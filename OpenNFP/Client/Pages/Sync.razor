@page "/sync"
@using Google.Apis.Auth.OAuth2
@using Google.Apis.Auth.OAuth2.Flows
@using Google.Apis.Auth.OAuth2.Responses
@using Google.Apis.Drive.v3
@using Google.Apis.Drive.v3.Data
@using Google.Apis.Http
@using Google.Apis.Services
@using Google.Apis.Upload
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http.Headers
@inject IAccessTokenProvider TokenProvider
@inject NavigationManager navManger
@inject HttpClient client;
@inject IChartingRepo repo;
@inject IDialogService DialogService;
@inject IRemoteStorageBackEnd remoteStorageBackend;
@inject IJSRuntime JSRuntime
@inject IAppState AppState

<PageTitle>Sync Data To Google Drive</PageTitle>

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">

    <LoginDisplay />

    <AuthorizeView>
        <Authorized>
            <MudCard>
                <MudCardHeader> 
                    Hello, @context.User?.Identity?.Name! Your Last Sync was on @(repo.Settings.LastSyncDate.ToString("g"))
                </MudCardHeader>
                <MudCardContent>
                    <p>
                        The current synced filename: <pre>@(AppState.Filename)</pre>
                    </p>
                    <pre>
                        @if (_loading)
                        {
                                <MudProgressCircular Class="ms-n1" Size="Size.Large" Indeterminate="true" />
                                <MudText Class="ms-2">Loading File Info</MudText>
                        }
                        else
                        {
                                <h3>Name = @File.FileName</h3>
                                <ul>
                                <li>Date Modified = @File.SyncTimeStamp</li>
                                <li>Size = @File.FileSizeKb KB</li>
                                <li>Id = @File.FileId</li>
                                                    </ul>
                        }
                    </pre>
                    <pre>
                        @FileContent
                    </pre>
                </MudCardContent>
                <MudCardActions>
                    <MudButton OnClick="refreshFileInfo" Variant="Variant.Text" Color="Color.Primary">
                        @if (_loading)
                        {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                                    <MudText>Refresh</MudText>
                        }
                    </MudButton>
                    <MudButton OnClick="SyncData" Variant="Variant.Text" Color="Color.Tertiary">
                        @if (_loading)
                        {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                                    <MudText>Sync</MudText>
                        }
                    </MudButton>
                    <MudButton OnClick="ReadData" Variant="Variant.Text" Color="Color.Primary">
                        @if (_processing)
                        {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                                    <MudText>Download</MudText>
                        }
                    </MudButton>
                    <MudButton OnClick="WriteData" Variant="Variant.Text" Color="Color.Secondary">
                        @if (_processing)
                        {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                                    <MudText>Write</MudText>
                        }
                    </MudButton>

                    <MudButton OnClick="Cancel" Variant="Variant.Text" Color="Color.Secondary" Disabled="@_processing">
                            <MudText>Cancel</MudText>
                    </MudButton>

                    <MudButton OnClick="OidcLogin" Variant="Variant.Text" Color="Color.Warning" Disabled="@_processing">
                        <MudText>Force Login</MudText>
                    </MudButton>

                </MudCardActions>
            </MudCard>
        </Authorized>
        <NotAuthorized>
            <p>Please Sign into Google To Sync</p>
        </NotAuthorized>
    </AuthorizeView>

    <br />
    <code>
        @ErrorMsg
    </code>
    <hr />
    <h6>Oidc Info</h6>
    <code>
        @OidcInfo
    </code>

</MudContainer>
@code {
    private bool _processing = false;
    private bool _loading = false;

    SyncInfo File { get; set; } = SyncInfo.Empty;
    string FileContent { get; set; } = string.Empty;
    string ErrorMsg { get; set; } = string.Empty;
    string OidcInfo { get; set; } = string.Empty;
    CancellationTokenSource cancellationTokenSource { get; set; } = new();

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await refreshFileInfo();
            OidcInfo = await JSRuntime.InvokeAsync<string>("oidc_info");
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        cancellationTokenSource.Cancel();
    }

    private async Task refreshFileInfo()
    {
        try
        {
            ErrorMsg = "";
            _loading = true;
            OidcInfo = await JSRuntime.InvokeAsync<string>("oidc_info");
            File = await remoteStorageBackend.GetLastSyncInfo(AppState.Filename, cancellationTokenSource.Token);
        }

        catch (Exception e)
        {
            ErrorMsg = e.Message + Environment.NewLine + e.StackTrace;
        }
        finally
        {
            _loading = false;
        }
    }

    public async Task WriteData()
    {
        try
        {
            cancellationTokenSource = new CancellationTokenSource();
            ErrorMsg = "";
            _processing = true;
            if (string.IsNullOrEmpty(File.FileId))
            {
                SyncInfo newFile = new() { FileName = AppState.Filename };
                await remoteStorageBackend.WriteAsync(newFile, repo.ExportModel, cancellationTokenSource.Token);
            }
            else
            {
                await remoteStorageBackend.WriteAsync(File, repo.ExportModel, cancellationTokenSource.Token);
            }
            await refreshFileInfo();

            _processing = false;
            await DialogService.ShowMessageBox("Sync Success", "Saved data to Google drive");
        }

        catch (Exception e)
        {
            ErrorMsg = e.Message + Environment.NewLine + e.StackTrace;
        }
        finally
        {
            _processing = false;
        }
    }

    public async Task ReadData()
    {
        try
        {
            cancellationTokenSource = new CancellationTokenSource();
            ErrorMsg = "";
            _processing = true;
            var data = await remoteStorageBackend.ReadAsync<ImportExportView>(File, cancellationTokenSource.Token);
            FileContent = data?.ToString();
        }
        catch (Exception e)
        {
            var inErr = e;
            do
            {
                ErrorMsg += inErr.Message + Environment.NewLine;
                inErr = inErr.InnerException;
            } while (inErr != null);
            ErrorMsg += e.StackTrace;
        }
        finally
        {
            _processing = false;
        }
    }
    public async Task SyncData()
    {
        try
        {
            cancellationTokenSource = new CancellationTokenSource();
            ErrorMsg = "";
            _processing = true;
            await repo.SyncAsync(remoteStorageBackend, AppState.Filename, cancellationTokenSource.Token);
            _processing = false;
        }
        catch (Exception e)
        {
            ErrorMsg = e.Message + Environment.NewLine + e.StackTrace;
        }
        finally
        {
            _processing = false;
        }
    }
    public async Task OidcLogin()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("odic_login");
        }
        catch (Exception e)
        {
            ErrorMsg = e.Message + Environment.NewLine + e.StackTrace;
        }
        finally
        {
            _processing = false;
        }
    }
}
