@page "/"

@using PSC.Blazor.Components.Chartjs.Interfaces
@using System.Text.Json.Serialization
@using System.Collections.Generic

@inject IChartingRepo ChartingRepo

<MudContainer MaxWidth="MaxWidth.False">
    @foreach (var c in cycles)
    {
        var days = ChartingRepo.GetDayRecordsForCycle(c.StartDate).ToList();

        <MudPaper Class="d-flex flex-row flex-grow-1 gap-4 mt-8" Elevation="0">
            <MudCard Width="12em">
                <MudCardContent>
                    <MudText Align="Align.Center" Typo="Typo.subtitle1">Cycle 1</MudText>
                    <MudText Typo="Typo.h4" Align="Align.Center">@c.StartDate.ToString("MMM dd")</MudText>
                    <MudText Typo="Typo.subtitle1" Align="Align.Center">@c.StartDate.Year</MudText>
                </MudCardContent>
            </MudCard>
            <MudList>
                <MudItem Class="d-flex flex-row">
                    <MudPaper Outlined="false" Square="true" Width="3em" Height="2em" xs="12" Elevation="0" />
                    @foreach (var day in days)
                    {

                        <MudPaper Outlined="true" Square="true" Width="3em" Height="2em"
                          Class="d-flex align-center justify-center mud-width-full" xs="12">
                            <MudText Typo="Typo.body2" Align="Align.Center">@day.Day.Date.Day</MudText>
                        </MudPaper>
                    }
                </MudItem>
                <MudItem Class="d-flex flex-row">
                    <MudPaper Outlined="false" Square="true" Width="3em" Height="2em" xs="12" Elevation="0" />
                    @foreach (var day in days)
                    {
                        <a href="/editday/@day.Day.IndexKey">
                            <MudPaper Outlined="true" Square="true" Width="3em" Height="3em"
                              Class="d-flex align-center justify-center mud-width-full" xs="12">
                                <MudText Typo="Typo.h6" Align="Align.Center"> @day.Index</MudText>
                            </MudPaper>
                        </a>
                    }
                </MudItem>
                <MudItem Class="d-flex flex-row">
                    <MudPaper Outlined="false" Square="true" Width="3em" Height="2em" xs="12" Elevation="0" />
                    @foreach (var day in days)
                    {
                        <MudPaper Outlined="true" Square="true" Width="3em" Height="3em"
                          Class="d-flex align-center justify-center mud-width-full" xs="12">
                            @if (day.Day.Coitus)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Favorite" Title="Favorite" Size="Size.Small" />
                            }
                        </MudPaper>
                    }
                </MudItem>
                <MudItem Class="d-flex flex-row">
                    <MudPaper Outlined="false" Square="true" Width="3em" Height="2em" xs="12" Elevation="0" />
                    @foreach (var day in days)
                    {
                        <MudPaper Outlined="true" Square="true" Width="3em" Height="3em"
                          Class="d-flex align-center justify-center mud-width-full" xs="12">
                            @if (day.Day.ClearBlueResult == ClearBlueResult.Low)
                            {
                                <MudText Typo="Typo.h6" Align="Align.Center">L</MudText>
                            }
                            @if (day.Day.ClearBlueResult == ClearBlueResult.High)
                            {
                                <MudText Typo="Typo.h6" Align="Align.Center">H</MudText>
                            }
                            @if (day.Day.ClearBlueResult == ClearBlueResult.Peak)
                            {
                                <MudText Typo="Typo.h6" Align="Align.Center">P</MudText>
                            }
                        </MudPaper>
                    }
                </MudItem>
                <MudItem Class="d-flex flex-row">
                    <MudPaper Outlined="false" Square="true" Width="3em" Height="2em" xs="12" Elevation="0" />
                    @foreach (var day in days)
                    {
                        <MudPaper Outlined="true" Square="true" Width="3em" Height="3em"
                          Class="d-flex align-center justify-center mud-width-full" xs="12">
                            @if (day.Day.BleedingAmount == Flow.Spotting)
                            {
                                <MudIcon Icon="@Icons.Material.Outlined.WaterDrop" Title="Spotting" Size="Size.Small" />
                            }
                            @if (day.Day.BleedingAmount == Flow.Light)
                            {
                                <MudIcon Icon="@Icons.Material.TwoTone.WaterDrop" Title="Light" Size="Size.Small" />
                            }
                            @if (day.Day.BleedingAmount == Flow.Heavy)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.WaterDrop" Title="Heavy" Size="Size.Small" />
                            }
                        </MudPaper>
                    }
                </MudItem>
                <MudItem Class="d-flex flex-row">
                    <MudPaper Outlined="false" Square="true" Width="3em" Height="2em" xs="12" Elevation="0" />
                    @foreach (var day in days)
                    {
                        <MudPaper Outlined="true" Square="true" Width="3em" Height="3em"
                          Class="d-flex align-center justify-center mud-width-full" xs="12">
                            @if (day.Day.CervixOpening == CervixOpening.Closed)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Circle" Title="Spotting" Size="Size.Small" Style="font-size:0.75em" />
                            }
                            @if (day.Day.CervixOpening == CervixOpening.Partial)
                            {
                                <MudIcon Icon="@Icons.Material.TwoTone.Circle" Title="Light" Size="Size.Small" Style="font-size:1em" />
                            }
                            @if (day.Day.CervixOpening == CervixOpening.Open)
                            {
                                <MudIcon Icon="@Icons.Material.Outlined.Circle" Title="Heavy" Size="Size.Small" />
                            }
                        </MudPaper>
                    }
                </MudItem>
                <MudItem>
                    <MudPaper Elevation="2">
                        <Chart Config="@_chartConfigs[c.StartDate.ToKey()]" @ref="_charts[c.StartDate.ToKey()]" />
                    </MudPaper>
                </MudItem>
            </MudList>
        </MudPaper>
    }
</MudContainer>

@code {
    private Dictionary<string, Chart> _charts = new Dictionary<string, Chart>();
    private Dictionary<string, IChartConfig> _chartConfigs = new Dictionary<string, IChartConfig>();
    private List<Cycle> cycles = new List<Cycle>();

    protected override void OnInitialized()
    {
        cycles = ChartingRepo.Cycles.ToList();
        foreach (var c in cycles)
        {
            var days = ChartingRepo.GetDayRecordsForCycle(c.StartDate).ToList();
            var config = new LineChartConfigEx()
                {
                    Data = new LineDataEx()
                    {
                        Labels = days.Select(q => q.Index.ToString()).ToList(),
                        Datasets = new List<LineDatasetEx>()
                    {
                        new LineDatasetEx()
                        {
                            Data = days.Select(q => q.Day.Temperature ).ToList(),
                            Fill = false,

                        }
                    },

                    },
                    Options = new PSC.Blazor.Components.Chartjs.Models.Common.Options()
                    {
                        Plugins = new Plugins()
                        {
                            Legend = new Legend()
                            {
                                Display = false,
                            },

                        },
                        Scales = new Scales()
                        {
                            X = new XAxes()
                            {
                                Grid = new Grid() { },
                                Position = "center",
                                Ticks = new TicksEx()
                                {
                                    Display = false
                                }
                            },
                            Y = new YAxesEx()
                            {
                                Position = "center"
                            },


                        }
                    },
                };
            _chartConfigs[c.StartDate.ToKey()] = config;
        }
    }

    public class YAxesEx : YAxes
    {
        [JsonPropertyName("position")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Position { get; set; } = "center";
    }

    public class TicksEx : Ticks
    {
        [JsonPropertyName("display")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public bool? Display { get; set; } = false;
    }

    public class LineDatasetEx : Dataset
    {
        [JsonPropertyName("data")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<decimal?> Data { get; set; }

        [JsonPropertyName("backgroundColor")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string BackgroundColor { get; set; }

        [JsonPropertyName("borderColor")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string BorderColor { get; set; }

        [JsonPropertyName("fill")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public bool Fill { get; set; }

        [JsonPropertyName("tension")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public decimal Tension { get; set; }

    }

    public class LineDataEx : Data<LineDatasetEx>
    {

    }

    public class LineChartConfigEx : IChartConfig
    {
        [JsonIgnore]
        public string CanvasId { get; } = Guid.NewGuid().ToString();


        [JsonPropertyName("type")]
        public string Type { get; set; } = "line";


        [JsonPropertyName("data")]
        public LineDataEx Data { get; set; } = new LineDataEx();


        [JsonPropertyName("options")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public Options Options { get; set; }
    }
}