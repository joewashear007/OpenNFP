@page "/editday/"
@page "/editday/{date}"
@using OpenNFP.Client.Utils;

@inject IChartingRepo ChartingRepo
@inject ILocalStorageService localStorage
@inject NavigationManager uriHelper;
@inject ILogger<EditDayForm> Logger;
@inject IDialogService DialogService;

<PageTitle>Edit Page: @date (Cycle Day: #)</PageTitle>

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">

    <MudCard Class="mb-16">
        <MudPaper Elevation="25" Outlined="true">
            <MudCardHeader Class="pa-0">
                <CardHeaderContent>
                    <MudPaper Class="d-flex justify-space-around">
                        <MudIconButton Icon="@Icons.Material.Outlined.ArrowBack" OnClick="PrevDayAsync" Disabled="@disableInput" Size="Size.Large" />
                        <MudSpacer />
                        <div>
                            <MudDatePicker Date="@Model.Date" DateChanged="DateChanged" Disabled="@disableInput"></MudDatePicker>
                            <MudText Typo="Typo.subtitle2">Cycle Day: @Model.CycleDay, Phase: @Model.CyclePhase </MudText>
                        </div>
                        <MudSpacer />
                        <MudIconButton Icon="@Icons.Material.Outlined.ArrowForward" OnClick="NextDayAsync" Disabled="@disableInput" Size="Size.Large" />
                    </MudPaper>
                </CardHeaderContent>
            </MudCardHeader>
        </MudPaper>
        <MudForm @ref="form">
            <MudCardContent>
                <MudGrid>
                    <MudItem md="6">
                        <MudNumericField Disabled="@disableInput" @bind-Value="@Model.Temperature"
                                         Label="Temperature"
                                         Step=".1M"
                                         Adornment="Adornment.End" AdornmentText="°F" Clearable=true />
                    </MudItem>
                    <MudItem md="3">
                        <MudCheckBox T="bool" Class="mt-2"
                                     Label="Abnormal Temp" Disabled="@disableInput"
                                     @bind-Value="@Model.AdmormalTemperature" />
                    </MudItem>
                    <MudItem md="3">
                        <MudCheckBox T="bool" Class="mt-2"
                                     Label="Coitus" Disabled="@disableInput"
                                     @bind-Value="@Model.Coitus"
                                     Color="Color.Secondary"
                                     CheckedIcon="@Icons.Material.Filled.Favorite"
                                     UncheckedIcon="@Icons.Material.Filled.FavoriteBorder" />
                    </MudItem>
                    <MudItem md="6">
                        <MudField Label="Ovulation Test" Class="mb-4">
                            <MudRadioGroup T="int" @bind-Value="@Model.OvulationTest.ValueInt">
                                @foreach (var v in Enum.GetValues<TestResult>())
                                {
                                    <MudRadio T="int" Value="@((int)v)" Disabled="@disableInput">@v.ToString()</MudRadio>
                                }
                            </MudRadioGroup>
                        </MudField>
                    </MudItem>
                    <MudItem md="6">
                        <MudField Label="Pregnancy Test">
                            <MudRadioGroup T="int" @bind-Value="@Model.PregnancyTest.ValueInt">
                                @foreach (var v in Enum.GetValues<TestResult>())
                                {
                                    <MudRadio T="int" Value="@((int)v)" Disabled="@disableInput">@v.ToString()</MudRadio>
                                }
                            </MudRadioGroup>
                        </MudField>
                    </MudItem>
                </MudGrid>

                <MudSlider T="int" TickMarks="true" TickMarkLabels="@Model.Clearblue.Labels"
                           Step="1" Disabled="@disableInput"
                           Min="@Model.Clearblue.Min"
                           Max="@Model.Clearblue.Max"
                           @bind-Value="@Model.Clearblue.ValueInt"
                           Class="mb-4 pl-8 pr-8">ClearBlue Monitor Value</MudSlider>

                <MudSlider T="int" TickMarks="true" TickMarkLabels="@Model.CervixTexture.Labels"
                           Step="1" Disabled="@disableInput"
                           Min="@Model.CervixTexture.Min"
                           Max="@Model.CervixTexture.Max"
                           @bind-Value="@Model.CervixTexture.ValueInt"
                           Class="mb-4 pl-8 pr-8">Cervix Firmness</MudSlider>

                <MudSlider T="int" TickMarks="true" TickMarkLabels="@Model.CervixOpening.Labels"
                           Step="1" Disabled="@disableInput"
                           Min="@Model.CervixOpening.Min"
                           Max="@Model.CervixOpening.Max"
                           @bind-Value="@Model.CervixOpening.ValueInt"
                           Class="mb-4 pl-8 pr-8">Cervix Openness</MudSlider>

                <MudSlider T="int" TickMarks="true" TickMarkLabels="@Model.MucusCharacteristic.Labels"
                           Step="1" Disabled="@disableInput"
                           Min="@Model.MucusCharacteristic.Min"
                           Max="@Model.MucusCharacteristic.Max"
                           @bind-Value="@Model.MucusCharacteristic.ValueInt"
                           Class="mb-4 pl-8 pr-8">Mucus Characteristic</MudSlider>

                <MudSlider T="int" TickMarks="true" TickMarkLabels="@Model.MucusSensation.Labels"
                           Step="1" Disabled="@disableInput"
                           Min="@Model.MucusSensation.Min"
                           Max="@Model.MucusSensation.Max"
                           @bind-Value="@Model.MucusSensation.ValueInt"
                           Class="mb-4 pl-8 pr-8">Mucus Sensation</MudSlider>

                <MudSlider T="int" TickMarks="true" TickMarkLabels="@Model.MenstruationFlow.Labels"
                           Step="1" Disabled="@disableInput"
                           Min="@Model.MenstruationFlow.Min"
                           Max="@Model.MenstruationFlow.Max"
                           @bind-Value="@Model.MenstruationFlow.ValueInt"
                           Class="mb-4 pl-8 pr-8">Menstruation</MudSlider>

            </MudCardContent>

            <MudCardContent Class=" mt-8">
                <MudTextField Label="Notes" @bind-Value="@Model.Notes" Lines="5" Variant="Variant.Outlined" Disabled="@disableInput" />
            </MudCardContent>

            <MudCardContent Class=" mt-8">
                <MudCheckBox T="bool" @bind-Value="@Model.StartCycle" Label="This Day Should Start a Cycle" Disabled="@disableInput"></MudCheckBox>
            </MudCardContent>

            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" FullWidth="true" OnClick="Save" Disabled="@disableInput">Save</MudButton>

            </MudCardActions>
            <MudCardContent Class="mt-8">
                <MudText Style="font-style:italic" Align="Align.Right">Last Modified on @Model.ModifiedOn.ToLocalTime().ToString("g")</MudText>
            </MudCardContent>
        </MudForm>
    </MudCard>
</MudContainer>

@code {
    [Parameter]
    public string date { get; set; } = string.Empty;

    bool disableInput = true;
    EditDayViewModel Model = null!;
    MudForm form = null!;


    string[] errors = { };

    protected override void OnInitialized()
    {
        Model = new EditDayViewModel(ChartingRepo);
    }


    private async Task NextDayAsync()
    {
        await DateChanged(Model.Date.AddDays(1));
    }
    private async Task PrevDayAsync()
    {
        await DateChanged(Model.Date.AddDays(-1));
    }

    private async Task DateChanged(DateTime? dateTime)
    {
        if (form.IsTouched)
        {
            bool? result = await DialogService.ShowMessageBox("Unsaved Edits",
                "You are navigating away without saving your changes", yesText: "Save and Go!", cancelText: "Cancel", noText: "Discard Changes");
            if (result.HasValue)
            {
                if (result.Value)
                {
                    await Save();
                }
                else
                {
                    // discard changes - let the page change happen
                    await form.ResetAsync();
                }
            }
            else
            {
                // stop the navigation
                return;
            }
        }

        disableInput = true;
        await Task.Delay(100);
        if (dateTime.HasValue)
        {
            await Model.LoadDayRecordAsync(dateTime.Value);
            disableInput = false;
            StateHasChanged();
        }

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (string.IsNullOrEmpty(date))
            {
                date = DateTime.Today.ToKey();
            }
            await DateChanged(date.ToDateTime());
        }
    }

    private async Task Save()
    {
        await form.Validate();
        if (form.IsValid)
        {
            bool isAlreadyCycleStart = ChartingRepo.IsCycleStart(date);
            Logger.LogInformation($"Saving {date} - State Cycle: {Model.StartCycle} [already start: {isAlreadyCycleStart}]");
            if (!Model.StartCycle && isAlreadyCycleStart)
            {
                await ChartingRepo.DeleteCycleAsync(date);
            }
            await Model.SaveDayRecord();
            uriHelper.NavigateTo(uriHelper.BaseUri);
        }
    }
}