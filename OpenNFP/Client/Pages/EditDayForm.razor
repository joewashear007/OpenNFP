@page "/editday/"
@page "/editday/{date}"
@using System.Text.Json

@inject IChartingRepo ChartingRepo
@inject NavigationManager uriHelper;

<PageTitle>Edit Page: @date (Cycle Day: #)</PageTitle>

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">
    @if (Day != null)
    {
        <MudCard>
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudCardContent>
                    <MudGrid>
                        <MudItem md="4">
                            <MudDatePicker Label="Date" Date="@dateVal" DateChanged="@(d => ChangeDate(d))"></MudDatePicker>
                        </MudItem>
                        <MudItem md="4">
                            <MudNumericField @bind-Value="@Day.Temperature"
                                         Label="Temperature"
                                         Step=".1M"
                                         Adornment="Adornment.End" AdornmentText="°F" Clearable=true />
                        </MudItem>
                        <MudItem m3="4">
                            <MudCheckBox Class="mt-2" Label="Coitus" @bind-Checked="@Day.Coitus" Color="Color.Secondary" CheckedIcon="@Icons.Material.Filled.Favorite" UncheckedIcon="@Icons.Material.Filled.FavoriteBorder"></MudCheckBox>
                        </MudItem>
                    </MudGrid>
                    <MudGrid>
                        <MudItem md="6">
                            <MudField Label="Ovulation Test" Class="mb-4">
                                <MudRadioGroup @bind-SelectedOption="@Day.OvulationTest">
                                    @foreach (var v in Enum.GetValues<TestResult>())
                                    {
                                    <MudRadio Option="@v">@v.ToString()</MudRadio>
                                    }
                            </MudRadioGroup>
                        </MudField>
                    </MudItem>
                    <MudItem md="6">
                        <MudField Label="Pregancy Test">
                            <MudRadioGroup @bind-SelectedOption="@Day.PregnancyTest">
                                @foreach (var v in Enum.GetValues<TestResult>())
                                    {
                                    <MudRadio Option="@v">@v.ToString()</MudRadio>
                                    }
                            </MudRadioGroup>
                        </MudField>
                    </MudItem>
                </MudGrid>
            </MudCardContent>

            <MudCardContent Class="pa-0">
                <MudSlider TickMarks="true" TickMarkLabels="@clearblue.Labels"
                           Step="1"
                           Min="@clearblue.Min"
                           Max="@clearblue.Max"
                           @bind-Value="@clearblue.ValueInt"
                           Class="mb-4 pl-8 pr-8">ClearBlue Monitor Value</MudSlider>

                <MudSlider TickMarks="true" TickMarkLabels="@cervixTexture.Labels"
                           Step="1"
                           Min="@cervixTexture.Min"
                           Max="@cervixTexture.Max"
                           @bind-Value="@cervixTexture.ValueInt"
                           Class="mb-4 pl-8 pr-8">Cervix Firmness</MudSlider>

                <MudSlider TickMarks="true" TickMarkLabels="@cervixOpening.Labels"
                           Step="1"
                           Min="@cervixOpening.Min"
                           Max="@cervixOpening.Max"
                           @bind-Value="@cervixOpening.ValueInt"
                           Class="mb-4 pl-8 pr-8">Cervix Openness</MudSlider>

                <MudSlider TickMarks="true" TickMarkLabels="@mucusCharacteristic.Labels"
                           Step="1"
                           Min="@mucusCharacteristic.Min"
                           Max="@mucusCharacteristic.Max"
                           @bind-Value="@mucusCharacteristic.ValueInt"
                           Class="mb-4 pl-8 pr-8">Mucus Characteristic</MudSlider>

                <MudSlider TickMarks="true" TickMarkLabels="@mucusSensation.Labels"
                           Step="1"
                           Min="@mucusSensation.Min"
                           Max="@mucusSensation.Max"
                           @bind-Value="@mucusSensation.ValueInt"
                           Class="mb-4 pl-8 pr-8">Mucus Sensation</MudSlider>



            </MudCardContent>
            <MudCardContent Class="pa-0">
                <MudSlider TickMarks="true" TickMarkLabels="@bleedingLables"
                           Step="1"
                           Min="1"
                           Max="@bleedingLables.Length"
                           Class="mb-4 pl-8 pr-8">Bleeding</MudSlider>

            </MudCardContent>

            <MudCardContent Class=" mt-8">
                <MudTextField T="string" Label="Notes" Text="@Day.Notes" Lines="5" Variant="Variant.Outlined" />
            </MudCardContent>
            <MudCardActions>
                <MudCheckBox @bind-Checked="@startCycle" Label="This Day Should Start a Cycle"></MudCheckBox>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(() => Save())">Save</MudButton>
            </MudCardActions>
        </MudForm>
    </MudCard>
    }
    else
    {
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" />
    }
</MudContainer>

@code {
    [Parameter]
    public string date { get; set; } = string.Empty;

    DateTime? dateVal { get; set; }
    DayRecord? Day { get; set; } = null;
    bool success;
    string[] errors = { };

    private bool startCycle { get; set; } = false;


    MudForm form;

    class EnumSliderHelper<T> where T : struct, Enum
    {
        public EnumSliderHelper(Action<T> setProp)
        {
            this.setProp = setProp;
        }
        private T _value = default(T);
        private readonly Action<T> setProp;

        public string[] Labels => Enum.GetNames<T>();
        public int Min => Enum.GetValues<T>().Cast<int>().Min();
        public int Max => Enum.GetValues<T>().Cast<int>().Max();
        public int ValueInt
        {
            get => (int)(object)_value;
            set
            {
                T newValue = (T)(object)value;
                _value = newValue;
                setProp(newValue);
            }
        }
        public T Value
        {
            get => _value;
            set
            {
                _value = value;
                setProp(value);
            }
        }
    }

    EnumSliderHelper<ClearBlueResult>? clearblue = null;
    EnumSliderHelper<CervixOpening>? cervixOpening = null;
    EnumSliderHelper<CervixTexture>? cervixTexture = null;
    EnumSliderHelper<MenstruationFlow>? flow = null;
    EnumSliderHelper<TestResult>? pregTest = null;
    EnumSliderHelper<TestResult>? ovulationTest = null;
    EnumSliderHelper<MucusSensation>? mucusSensation = null;
    EnumSliderHelper<MucusCharacteristic>? mucusCharacteristic = null;


    string[] clearBlueLabels = Enum.GetNames(typeof(ClearBlueResult)).ToArray();
    string[] cervixOpenLabels = Enum.GetNames(typeof(CervixOpening)).ToArray();
    string[] cervixFirmLabels = Enum.GetNames(typeof(CervixTexture)).ToArray();
    string[] bleedingLables = Enum.GetNames(typeof(MenstruationFlow)).ToArray();
    string[] pregTestLabels = Enum.GetNames(typeof(TestResult)).ToArray();
    string[] ovulationTestLabels = Enum.GetNames(typeof(TestResult)).ToArray();
    string[] mucusLabels = Enum.GetNames(typeof(MucusSensation)).ToArray();
    string[] mucusCharLabels = Enum.GetNames(typeof(MucusCharacteristic)).ToArray();

    protected override void OnInitialized()
    {
        clearblue = new EnumSliderHelper<ClearBlueResult>(q => Day.ClearBlueResult = q);
        cervixOpening = new EnumSliderHelper<CervixOpening>(q => Day.CervixOpening = q);
        cervixTexture = new EnumSliderHelper<CervixTexture>(q => Day.CervixTexture = q);
        flow = new EnumSliderHelper<MenstruationFlow>(q => Day.MenstruationFlow = q);
        pregTest = new EnumSliderHelper<TestResult>(q => Day.PregnancyTest = q);
        ovulationTest = new EnumSliderHelper<TestResult>(q => Day.OvulationTest = q);
        mucusSensation = new EnumSliderHelper<MucusSensation>(q => Day.MucusSensation = q);
        mucusCharacteristic = new EnumSliderHelper<MucusCharacteristic>(q => Day.MucusCharacteristic = q);

        if (string.IsNullOrEmpty(date))
        {
            date = DateTime.Today.ToKey();
            dateVal = DateTime.Today;
            Day = new DayRecord() { Date = dateVal.Value };
            startCycle = false;
        }
        else
        {
            dateVal = date.ToDateTime();
            Day = ChartingRepo.GetDay(date);
            startCycle = ChartingRepo.GetCycleDay(date) == 1;
        }

        clearblue.Value = Day.ClearBlueResult;
        clearblue.Value = Day.ClearBlueResult;
        cervixOpening.Value = Day.CervixOpening;
        cervixTexture.Value = Day.CervixTexture;
        flow.Value = Day.MenstruationFlow;
        pregTest.Value = Day.PregnancyTest;
        ovulationTest.Value = Day.OvulationTest;
        mucusSensation.Value = Day.MucusSensation;
        mucusCharacteristic.Value = Day.MucusCharacteristic;
    }

    private void Save()
    {
        if (Day != null)
        {
            Day.ClearBlueResult = clearblue.Value;
            Day.ClearBlueResult = clearblue.Value;
            Day.CervixOpening = cervixOpening.Value;
            Day.CervixTexture = cervixTexture.Value;
            Day.MenstruationFlow = flow.Value;
            Day.PregnancyTest = pregTest.Value;
            Day.OvulationTest = ovulationTest.Value;
            Day.MucusSensation = mucusSensation.Value;
            Day.MucusCharacteristic = mucusCharacteristic.Value;
            form.Validate();
            if (form.IsValid)
            {
                Console.WriteLine($"Saving Day {Day.Date} - State Cycle: {startCycle}");
                Console.WriteLine(JsonSerializer.Serialize(Day));
                ChartingRepo.AddUpdateRecord(Day, startCycle);
                uriHelper.NavigateTo(uriHelper.BaseUri);
            }
        }
        else
        {
            Console.WriteLine("Error - Day is null");
        }
    }

    private void ChangeDate(DateTime? d)
    {
        Console.WriteLine($"Changeing Date: {d}");
        dateVal = d;
        date = dateVal.ToKey();
        Day = ChartingRepo.GetDay(date);
        if (Day == null)
        {
            Day = new DayRecord() { Date = dateVal.Value };
        }
        clearblue.Value = Day.ClearBlueResult;
        clearblue.Value = Day.ClearBlueResult;
        cervixOpening.Value = Day.CervixOpening;
        cervixTexture.Value = Day.CervixTexture;
        flow.Value = Day.MenstruationFlow;
        pregTest.Value = Day.PregnancyTest;
        ovulationTest.Value = Day.OvulationTest;
        mucusSensation.Value = Day.MucusSensation;
        mucusCharacteristic.Value = Day.MucusCharacteristic;
        startCycle = ChartingRepo.GetCycleDay(date) == 1;
        StateHasChanged();
    }
}