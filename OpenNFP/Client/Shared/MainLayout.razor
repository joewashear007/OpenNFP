@using OpenNFP.Client.Utils
@using System.Diagnostics.CodeAnalysis;
@inherits LayoutComponentBase
@inject NavigationManager uriHelper;
@inject IRemoteStorageBackend RemoteStorageBackend;
@inject IChartingRepo ChartingRepo
@inject ISnackbar Snackbar
@inject ILogger<MainLayout> Logger;
@inject IAppState AppState;

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>

    <MudAppBar>
        @if (!isMainPage)
        {
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Inherit" Edge="Edge.Start" OnClick="Home" />
        }
        else
        {
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        }
        OpenNFP
        <MudSpacer />
        <AuthorizeView>
            <Authorized>
                @if (isMainPage)
                {
                    <MudIconButton Icon="@syncIcon" Color="Color.Inherit" OnClick="@Sync" Class="@syncIconClasses" Disabled=@syncIconDisabled />
                }
            </Authorized>
            <NotAuthorized>
                <MudIconButton Icon="@Icons.Material.Outlined.Login" Color="Color.Inherit" OnClick="@Login" />
            </NotAuthorized>
        </AuthorizeView>
        @*<MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Inherit" OnClick="@Refresh" />*@
        <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Inherit" OnClick="@AddDay" />
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer Fixed="true">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private string syncIconClasses = string.Empty;
    private string syncIcon = Icons.Material.Outlined.CloudSync;
    private bool syncIconDisabled = false;
    bool _drawerOpen = false;

    public bool ShouldRunSync { get; set; } = true;
    public bool isMainPage { get => new Uri(uriHelper.Uri).Segments.Count() == 1; }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void Home()
    {
        uriHelper.NavigateTo("/");
    }

    private void AddDay()
    {
        uriHelper.NavigateTo(uriHelper.BaseUri + "/editday");
    }

    private void Login()
    {
        uriHelper.NavigateTo(uriHelper.BaseUri + "/sync");
    }

    private void Refresh()
    {
        //TODO: refresh main app page
        AppState.ShouldRunSyncOnStartup = true;
        StateHasChanged();
    }


    private async Task Sync()
    {
        try
        {
            CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();
            syncIconClasses = "icon-spin";
            syncIcon = Icons.Material.Outlined.Sync;
            syncIconDisabled = true;
            StateHasChanged();
            var _snackbar = Snackbar.Add("Syncing Data", Severity.Normal, config =>
            {
                config.Icon = Icons.Material.Outlined.Sync;
                config.VisibleStateDuration = int.MaxValue;
                config.Action = "Cancel";
                config.ActionVariant = Variant.Text;
                config.ActionColor = Color.Error;
                config.Onclick = snackbar =>
                {
                    cancellationTokenSource.Cancel();
                    Snackbar.Add("Sync Cancelled", Severity.Warning);
                    return Task.CompletedTask;
                };
            });


            await ChartingRepo.SyncAsync(RemoteStorageBackend, cancellationTokenSource.Token);
            Snackbar.Remove(_snackbar);

            if (!cancellationTokenSource.IsCancellationRequested)
            {
                Snackbar.Add("Sync Complete", Severity.Success);
            }

        }
        catch (Exception e)
        {
            var errorMsg = "";
            var inErr = e;
            do
            {
                errorMsg += inErr.Message + Environment.NewLine;
                inErr = inErr.InnerException;
            } while (inErr != null);
            errorMsg += e.StackTrace;

            Snackbar.Add(errorMsg, Severity.Error);
        }
        finally
        {
            syncIconDisabled = false;
            syncIconClasses = string.Empty;
            syncIcon = Icons.Material.Outlined.CloudSync;
            StateHasChanged();

        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (authenticationStateTask != null && isMainPage && ShouldRunSync)
            {
                var authenticationState = await authenticationStateTask;
                if (authenticationState?.User?.Identity?.IsAuthenticated ?? false)
                {
                    await Sync();
                    AppState.ShouldRunSyncOnStartup = false;
                    StateHasChanged();
                }
                else
                {
                    Logger.LogWarning("User is not authenticated");
                }
            }
        }
    }
}
