@using OpenNFP.Client.Utils
@using OpenNFP.Shared.Internal
@inject IJSRuntime JS
@inject IChartingRepo Repo
@inject IDialogService DialogService
@inject ILocalStorageService localStorage
@inject NavigationManager MyNavigationManager
@inject ILogger<NavMenu> Logger;


<MudStack Justify="@Justify.SpaceBetween" Style="height:100%">

    <MudNavMenu>
        <MudNavLink Href="@(MyNavigationManager.BaseUri)" Match="NavLinkMatch.All">Dashboard</MudNavLink>
        <MudNavLink Href="@(MyNavigationManager.BaseUri + "/editday/" + DateTime.Today.ToKey())" Match="NavLinkMatch.Prefix">Edit Day</MudNavLink>
        <MudNavLink Href="@(MyNavigationManager.BaseUri + "/sync")" Match="NavLinkMatch.All">Sync</MudNavLink>
        <MudNavLink Href="@(MyNavigationManager.BaseUri + "/terms")" Match="NavLinkMatch.All">Terms</MudNavLink>
        <MudNavGroup Title="Settings" Expanded="true">
            <MudNavLink OnClick="@ReloadDemoData">Reload Demo Data</MudNavLink>
            <MudNavLink OnClick="@Clear">Clear Data</MudNavLink>
        </MudNavGroup>
        <MudNavLink Href="/about" Match="NavLinkMatch.Prefix">About</MudNavLink>
        <MudDivider />
        <MudNavLink OnClick="ResetSync" Disabled="@(AppState?.ShowStartUpSync ?? false)">Reset OnSync Startup</MudNavLink>
    </MudNavMenu>

    <MudPaper>
        <MudList Clickable="true">
            <MudDivider />
            <MudListItem Href="@(MyNavigationManager.BaseUri + "/terms")" Text="Terms of Service" />
            <MudDivider />
            <MudListItem OnClick="Import" Text="Import" />
            <MudDivider />
            <MudListItem OnClick="Export" Text="Export" />
            <MudDivider />
            <MudListItem OnClick="() => Notify(true)" Text="Notify On" />
            <MudDivider />
            <MudListItem OnClick="() => Notify(false)" Text="Notify Off" />
        </MudList>
    </MudPaper>
</MudStack>

<MudMessageBox @ref="mbox" Title="Replace Data" CancelText="Cancel" YesText="Upload and Overwrite">
    <MessageContent>
        This is erase all your data and import the data.
        <InputFile id="fileInput" OnChange="UploadFiles" hidden />
        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.CloudUpload"
                   for="fileInput">
            Upload Files
        </MudButton>
        @if (!string.IsNullOrEmpty(importErrorText))
        {
            <MudAlert Severity="Severity.Error">@importErrorText</MudAlert>
        }
    </MessageContent>
</MudMessageBox>


@code {
    [CascadingParameter(Name = "AppState")]
    protected AppState? AppState { get; set; }

    private MudMessageBox mbox { get; set; }
    private ImportExportView? importData { get; set; } = null;
    private string importErrorText { get; set; } = "";

    private void ResetSync()
    {
        if (AppState is not null)
        {
            AppState.ShowStartUpSync = true;
            Logger.LogDebug("Reseting AppState ShowStartUpSync = {Value}", AppState.ShowStartUpSync);
            StateHasChanged();
        }
    }

    private async Task Export()
    {
        var data = Repo.ExportModel;
        var bytes = JsonSerializer.SerializeToUtf8Bytes(data);
        await JS.InvokeVoidAsync("BlazorDownloadFile", "open-nfp.json", "application/json", bytes);
    }

    private async Task Import()
    {
        bool? result = await mbox.Show();
        if (result.HasValue && result.Value && importData != null)
        {
            await Repo.ImportAsync(importData);
            StateHasChanged();
            Logger.LogInformation($"Successfully Import Data (Cycles: {Repo.Cycles.Count()} )");
            MyNavigationManager.NavigateTo(MyNavigationManager.BaseUri);
        }
    }


    private async Task UploadFiles(InputFileChangeEventArgs fileEvent)
    {
        try
        {
            Stream stream = fileEvent.File.OpenReadStream();
            importData = await JsonSerializer.DeserializeAsync<ImportExportView>(stream);
            importErrorText = "";
        }
        catch (Exception e)
        {
            importErrorText = e.Message;
        }
    }

    private async Task Clear()
    {
        await localStorage.ClearAsync();
        Repo.Clear();
    }

    private async Task ReloadDemoData()
    {
        await localStorage.ClearAsync();
        await DemoData.LoadDemoData(Repo, DateTime.Today, clear: true);
        MyNavigationManager.NavigateTo(MyNavigationManager.BaseUri, true);
    }

    private async Task Notify(bool on)
    {
        if (on)
        {
            await JS.InvokeVoidAsync("notifyOn");
        }
        else
        {
            await JS.InvokeVoidAsync("notifyOff");

        }
    }
}