@inject IRemoteStorageBackEnd remoteStorageBackend;
@inject IChartingRepo ChartingRepo;
@inject ILogger<SyncPopOver> Logger;
@inject IAppState AppState;


<MudPopover Open="@_isOpen" Fixed="true" Class="px-4 pt-4 mt-16" AnchorOrigin="Origin.TopCenter" TransformOrigin="Origin.CenterCenter">
    <div class="d-flex flex-column">
        <MudText>Loading Spiner while Sync Happens.</MudText>
        <MudButton OnClick="@CancelSync" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Cancel</MudButton>
    </div>
</MudPopover>

@code {

    [Parameter]
    public EventCallback OnClose { get; set; }
    CancellationTokenSource cancellationTokenSource = new();

    public bool _isOpen = true;

    public async Task CancelSync()
    {
        Logger.LogWarning("Sync was Canceled");
        cancellationTokenSource.Cancel();
        _isOpen = false;
        if (OnClose.HasDelegate)
        {
            await OnClose.InvokeAsync();
        }
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await ChartingRepo.SyncAsync(remoteStorageBackend, AppState.Filename, cancellationTokenSource.Token);
            _isOpen = false;
            if (OnClose.HasDelegate)
            {
                await OnClose.InvokeAsync();
            }
            Logger.LogInformation("Sync Complete");
        }
    }
}

